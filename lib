# vim: set ft=sh:

# Allow using colors when inside a terminal
[[ -t 1 ]] && setbold="$(tput bold)"
[[ -t 1 ]] && setred="$(tput setaf 1)"
[[ -t 1 ]] && setgreen="$(tput setaf 2)"
[[ -t 1 ]] && reset="$(tput sgr0)"

# Print an error message to error output then exit
#
# Arguments:
#
# $1 - Error message to print
error() {
    echo "$setbold$setred==> ERROR:$reset$setbold $1$reset" >&2
    exit 1
}

# Start a section
#
# Arguments:
#
# $1 - Section name
section() {
    echo "$setbold$setgreen==>$reset$setbold $1$reset" >&2
}

# Print a status message
#
# Arguments:
#
# $1 - Status message
status() {
    echo "$1" >&2
}

# Make a reproducible tar archive for a directory
# See <https://reproducible-builds.org/docs/archives/>
#
# Arguments:
#
# $1 - Name of the resulting archive file
# $2 - Path to the directory to archive
rtar() {
    tar --sort=name \
        --owner=0 --group=0 --numeric-owner \
        --mtime="@${SOURCE_DATE_EPOCH}" \
        --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime \
        --create --file - --directory "$2" . \
        | gzip -9 --no-name - > "$1"
}

# Curl command with flags suitable for scripting
rcurl() {
    curl --fail --silent --tlsv1.2 "$@"
}

# Curl command with flags suitable for scripting, restricted to HTTPS
rsecurl() {
    rcurl --proto '=https' "$@"
}

# Load information from a package recipe
#
# Arguments:
#
# $1 - Path to the package recipe
load-recipe() {
    source "$1"/package

    [[ -z $pkgname ]] && error "Missing or empty 'pkgname' field"
    [[ -z $pkgdesc ]] && error "Missing or empty 'pkgdesc' field"
    [[ -z $url ]] && error "Missing or empty 'url' field"
    [[ -z $pkgver ]] && error "Missing or empty 'pkgver' field"
    [[ -z $timestamp ]] && error "Missing or empty 'timestamp' field"
    [[ -z $section ]] && error "Missing or empty 'section' variable"
    [[ -z $maintainer ]] && error "Missing or empty 'maintainer' variable"
    [[ -z $license ]] && error "Missing or empty 'license' variable"
    [[ -z $arch ]] && arch=armv7-3.2

    [[ -z $image ]] && error "Missing or empty 'image' variable"
    [[ -z $source ]] && error "Missing or empty 'source' variable"
    [[ -z $sha256sums ]] && error "Missing or empty 'sha256sums' variable"

    return 0
}

# Generate the archive name of a package
#
# Arguments:
#
# $1 - Path to the package recipe
archive-name() {
    (load-recipe "$1"
     echo "${pkgname}_${pkgver}_${arch}.ipk")
}

# Get the full tag of a Docker image
#
# Arguments:
#
# $1 - Name and version of the image (e.g. qt:v1.0)
image-name() {
    echo "ghcr.io/toltec-dev/$1"
}
