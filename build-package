#!/usr/bin/env bash

set -e
source "${BASH_SOURCE%/*}"/lib

usage="$0 RECIPE WORKDIR

Build a package following the recipe defined in RECIPE.
The WORKDIR must be a non-existent directory in which the build is performed.

Environment variables:

    [DOCKER_PREFIX]     Tag prefix to the Docker images used for building.

Arguments:

    -h, --help      Show this help message."

if [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
    echo "$usage"
    exit
fi

if [[ $# -lt 2 ]]; then
    error "Missing arguments. Use the --help flag for more information."
fi

recipedir="$1"
workdir="$2"

# Create working directories
[[ -d $workdir ]] && files="$(ls -qA -- "$workdir")" && [[ -n $files ]] \
    && error "Working directory exists and is not empty"
mkdir -p "$workdir"

srcdir="$workdir"/src
mkdir "$srcdir"

pkgdir="$workdir"/pkg
mkdir "$pkgdir"

ctldir="$workdir"/control
mkdir "$ctldir"

ardir="$workdir"/ar
mkdir "$ardir"

# Define the SOURCE_DATE_EPOCH to the date of latest commit
# See <https://reproducible-builds.org/docs/source-date-epoch/>
SOURCE_DATE_EPOCH="$(git log -1 --pretty=%ct)"
export SOURCE_DATE_EPOCH

# Load package info and script
load-recipe "$recipedir"

# Fetch source files
status "Fetching source files"
git clone --quiet --recursive "$origin" "$srcdir"
pushd "$srcdir" > /dev/null
git checkout --quiet "$revision"
popd > /dev/null

# Set atime and mtime to fixed timestamp for all source files
find "$srcdir" -exec touch --no-dereference --date="@${SOURCE_DATE_EPOCH}" {} +

# Run build script inside a Docker container

branch="$(git rev-parse --abbrev-ref HEAD)"
sudo docker run --interactive --rm \
    --mount type=bind,src="$(realpath "$recipedir")",dst=/recipe \
    --mount type=bind,src="$(realpath "$srcdir")",dst=/src \
    "${DOCKER_PREFIX}toltec/${image}:${branch}" /bin/bash \
<<CMDS
    source /recipe/package
    cd /src
    build
    chown -R $(id -u):$(id -u) /src/
CMDS

# Run packaging script
package

# Create control file and archive
ctlfile="$ctldir"/control

{
    echo "Package: $pkgname"
    echo "Version: $pkgver"
    echo "License: $license"
    echo "Section: $section"
    echo "Maintainer: $maintainer"
    echo "Architecture: $arch"
    echo "Description: $pkgdesc"
    [[ -n $depends ]] && echo "Depends: $depends"
    [[ -n $conflicts ]] && echo "Conflicts: $conflicts"
} >> "$ctlfile"

# Copy install scripts
[[ -f "$recipedir"/preinst ]] && install -D -m 755 "$recipedir"/preinst "$ctldir"/preinst
[[ -f "$recipedir"/postinst ]] && install -D -m 755 "$recipedir"/postinst "$ctldir"/postinst
[[ -f "$recipedir"/prerm ]] && install -D -m 755 "$recipedir"/prerm "$ctldir"/prerm
[[ -f "$recipedir"/postrm ]] && install -D -m 755 "$recipedir"/postrm "$ctldir"/postrm

# Create archives
status "Creating archive"
pkgar="$ardir"/data.tar.gz
ctlar="$ardir"/control.tar.gz
versionar="$ardir"/debian-binary
arar="$workdir/$(archive-name "$recipedir")"

echo "2.0" >> "$versionar"
rtar -zcf "$pkgar" -C "$pkgdir" .
rtar -zcf "$ctlar" -C "$ctldir" .
rtar -zcf "$arar" -C "$ardir" .

status "Done. Result is in $arar"
