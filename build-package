#!/usr/bin/env bash

source "${BASH_SOURCE%/*}"/lib
usage="$(basename "$0") PACKAGE WORKDIR

Build the package archive described in PACKAGE.
The WORKDIR must be a non-existent directory in which the build is performed.

Arguments:

    -h, --help      Show this help message."

if [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
    echo "$usage"
    exit
fi

if [[ $# -lt 2 ]]; then
    error "Missing arguments. Use the --help flag for more information."
fi

defdir="$1"
workdir="$2"

# Create working directories
[[ -d $workdir ]] && error "Working directory already exists!"
mkdir "$workdir"

srcdir="$workdir"/src
mkdir "$srcdir"

pkgdir="$workdir"/pkg
mkdir "$pkgdir"

ctldir="$workdir"/control
mkdir "$ctldir"

ardir="$workdir"/ar
mkdir "$ardir"

# Define the SOURCE_DATE_EPOCH to the latest commitâ€™s time
# See <https://reproducible-builds.org/docs/source-date-epoch/>
export SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)

# Load reMarkable toolchain
source /usr/local/oecore-x86_64/environment-setup-cortexa9hf-neon-oe-linux-gnueabi

# Load package info and script
source "$defdir"/package

[[ -z $pkgname ]] && error "Missing or empty 'pkgname' variable"
[[ -z $pkgver ]] && error "Missing or empty 'pkgver' variable"
[[ -z $license ]] && error "Missing or empty 'license' variable"
[[ -z $section ]] && error "Missing or empty 'section' variable"
[[ -z $maintainer ]] && error "Missing or empty 'maintainer' variable"
[[ -z $arch ]] && arch=armv7-3.2
[[ -z $pkgdesc ]] && error "Missing or empty 'description' variable"

[[ -z $origin ]] && error "Missing or empty 'origin' variable"
[[ -z $revision ]] && error "Missing or empty 'revision' variable"

# Fetch source files
status "Fetching source files"
git clone --quiet --recursive "$origin" "$srcdir"

# Set atime and mtime to fixed timestamp for all files
find "$srcdir" -exec touch --no-dereference --date="@${SOURCE_DATE_EPOCH}" {} +

# Run build script
status "Building package"
pushd "$srcdir" > /dev/null || exit 1
git checkout --quiet "$revision"
build
popd > /dev/null || exit 1

# Run packaging script
package

# Create control file and archive
ctlfile="$ctldir"/control

{
    echo "Package: $pkgname"
    echo "Version: $pkgver"
    echo "License: $license"
    echo "Section: $section"
    echo "Maintainer: $maintainer"
    echo "Architecture: $arch"
    echo "Description: $pkgdesc"
    [[ -n $depends ]] && echo "Depends: $depends"
    [[ -n $conflicts ]] && echo "Conflicts: $conflicts"
} >> "$ctlfile"

# Copy install scripts
[[ -f "$defdir"/preinst ]] && install -D -m 755 "$defdir"/preinst "$ctldir"/preinst
[[ -f "$defdir"/postinst ]] && install -D -m 755 "$defdir"/postinst "$ctldir"/postinst
[[ -f "$defdir"/prerm ]] && install -D -m 755 "$defdir"/prerm "$ctldir"/prerm
[[ -f "$defdir"/postrm ]] && install -D -m 755 "$defdir"/postrm "$ctldir"/postrm

# Create archives
status "Creating archive"
pkgar="$ardir"/data.tar.gz
ctlar="$ardir"/control.tar.gz
versionar="$ardir"/debian-binary
arar="$workdir/${pkgname}_${pkgver}_${arch}.ipk"

echo "2.0" >> "$versionar"
rtar --transform="s/^${pkgdir//\//\\\/}/./" -zcf "$pkgar" "$pkgdir"
rtar --transform="s/^${ctldir//\//\\\/}/./" -zcf "$ctlar" "$ctldir"
rtar --transform="s/^${ardir//\//\\\/}/./" -zcf "$arar" "$ardir"

status "Done. Result is in $arar"
