# vim: set ft=sh:

# Print an error message to error output then exit
#
# Arguments:
#
# $1 - Error message to print
error() {
    echo "Error: $1" >&2
    exit 1
}

# Print a status message
#
# Arguments:
#
# $1 - Current status message
status() {
    echo "=> $1" >&2
}

# Tar command with flags for reproducible archives
# See <https://reproducible-builds.org/docs/archives/>
rtar() {
    tar --sort=name \
        --owner=0 --group=0 --numeric-owner \
        --mtime="@${SOURCE_DATE_EPOCH}" \
        --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime \
        "$@"
}

# Curl command with flags suitable for scripting
rcurl() {
    curl --proto '=https' --fail --silent --tlsv1.2 "$@"
}

# Load information from a package recipe
#
# Arguments:
#
# $1 - Path to the package recipe
load-recipe() {
    source "$1"/package

    [[ -z $pkgname ]] && error "Missing or empty 'pkgname' variable"
    [[ -z $pkgver ]] && error "Missing or empty 'pkgver' variable"
    [[ -z $license ]] && error "Missing or empty 'license' variable"
    [[ -z $section ]] && error "Missing or empty 'section' variable"
    [[ -z $maintainer ]] && error "Missing or empty 'maintainer' variable"
    [[ -z $arch ]] && arch=armv7-3.2
    [[ -z $pkgdesc ]] && error "Missing or empty 'description' variable"

    [[ -z $image ]] && error "Missing or empty 'image' variable"
    [[ -z $origin ]] && error "Missing or empty 'origin' variable"
    [[ -z $revision ]] && error "Missing or empty 'revision' variable"

    return 0
}

# Generate the archive name of a package
#
# Arguments:
#
# $1 - Path to the package recipe
archive-name() {
    (load-recipe "$1"
     echo "${pkgname}_${pkgver}_${arch}.ipk")
}

# Get the full tag of a Docker image
#
# Arguments:
#
# $1 - Short tag of the image
image-name() {
    branch="$(git rev-parse --abbrev-ref HEAD)"
    echo "ghcr.io/matteodelabre/toltec-${1}:${branch}"
}
